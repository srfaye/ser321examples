plugins {
  id 'java'
  id "com.google.protobuf" version "0.8.13" apply true
}

description = "SI Client/Server Program"

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.json:json:20171018'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.13.0'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.13.0'
    }
    generateProtoTasks {
    all().each { task ->
      task.builtins {
        // Generates Python code in the output folder:
        python { }
      }
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task tcpClient(type: JavaExec) {
  description 'Client program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  main = 'tcp.Client'

  // gradle runClient -Phost=somehost -Pport=someport
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  }
}

task tcpServer(type: JavaExec) {
  description 'Server program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  main = 'tcp.Server'

  // gradle runClient -Pport=someport
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}

task udpClient(type: JavaExec) {
  description 'Client program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  main = 'udp.Client'

  // gradle runClient -Phost=somehost -Pport=someport
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  }
}

task udpServer(type: JavaExec) {
  description 'Server program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  main = 'udp.Server'

  // gradle runClient -Pport=someport
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}

task guiClient(type: JavaExec) {
  description 'Client program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  main = 'gui.ClientGui'

  // gradle runClient -Phost=somehost -Pport=someport
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  }
}

task guiServer(type: JavaExec) {
  description 'Server program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  main = 'gui.Server'

  // gradle runClient -Pport=someport
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}

task pbufClient(type: JavaExec) {
  description 'Client program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
  main = 'pbuf.Client'

  // gradle runClient -Phost=somehost -Pport=someport
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  }
}

task pbufServer(type: JavaExec) {
  description 'Server program for SI server example'

  classpath = sourceSets.main.runtimeClasspath
  main = 'pbuf.Server'

  // gradle runClient -Pport=someport
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}
