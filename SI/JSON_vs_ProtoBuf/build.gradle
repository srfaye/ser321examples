plugins {
  id 'java'
  id "com.google.protobuf" version "0.8.13" apply true
}

description = "SI Client/Server Program"

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.json:json:20171018'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.13.0'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.13.0'
    }
    generateProtoTasks {
    all().each { task ->
      task.builtins {
        // Generates Python code in the output folder:
        python { }
      }
    }
  }
}

// default args
def host = 'localhost'
def port = 8005

// check for gradle args (-Phost=somehost -Pport=someport)
task arguments {
    if (project.hasProperty("host")) {
      host = project.getProperty("host")
    }
    if (project.hasProperty("port")) {
      port = project.getProperty("port")
    }
}

task jsonServer(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  description = "Run Server"
  main = 'json.Server'
  // default args
  args port
}

task jsonClient(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  description = "Run Client"
  standardInput = System.in
  main = 'json.Client'
  // default args
  args host
  args port
}

task pbufServer(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  description = "Run Server"
  main = 'pbuf.Server'
  // default args
  args port
}

task pbufClient(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  description = "Run Client"
  standardInput = System.in
  main = 'pbuf.Client'
  // default args
  args host
  args port
}
